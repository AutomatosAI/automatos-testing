---
# Automotas AI Comprehensive Testing Configuration
# Used across all test phases for consistent testing

api:
  base_url: "http://localhost:8000"
  fallback_urls:
    - "http://api.automatos.app"
    - "http://206.81.0.227:8000"
  
  # Authentication headers
  authentication:
    api_key: "test_api_key_for_backend_validation_2025"
    headers:
      Content-Type: "application/json"
      X-API-Key: "test_api_key_for_backend_validation_2025"
      Authorization: "Bearer test_api_key_for_backend_validation_2025"

  # Request settings
  timeout: 30
  max_retries: 3
  retry_delay: 1.0

# Logging configuration
logging:
  level: "INFO"
  format: "json"
  capture_full_responses: true
  capture_request_bodies: true
  log_response_times: true
  log_headers: true

# Test data for comprehensive testing
test_data:
  agents:
    - name: "Test Agent Alpha"
      agent_type: "code_architect"
      description: "Primary test agent for comprehensive testing"
      configuration:
        programming_languages: ["python", "javascript"]
        frameworks: ["fastapi", "react"]
        focus_areas: ["testing", "validation"]
    
    - name: "Test Agent Beta"
      agent_type: "security_expert" 
      description: "Secondary test agent for validation"
      configuration:
        security_frameworks: ["OWASP", "NIST"]
        scan_types: ["static", "dynamic"]
        focus_areas: ["vulnerabilities", "compliance"]

  skills:
    - name: "Test Skill Alpha"
      skill_type: "code_review"
      description: "Comprehensive code analysis skill"
      parameters:
        languages: ["python", "javascript"]
        complexity: "high"
    
    - name: "Test Skill Beta"
      skill_type: "security_scan"
      description: "Security vulnerability detection"
      parameters:
        scan_depth: "comprehensive"
        frameworks: ["OWASP"]

  workflows:
    - name: "Test Workflow Alpha"
      description: "Comprehensive testing workflow"
      workflow_type: "analysis"
      configuration:
        steps: ["validate", "analyze", "report"]
        priority: "high"

  documents:
    - title: "Test Document Alpha"
      content: "This is comprehensive test content for document processing validation. It contains sufficient text to test processing capabilities and analytics."
      document_type: "text"
      metadata:
        category: "test"
        priority: "high"
        tags: ["testing", "validation", "comprehensive"]

  # Context Engineering test data
  context_engineering:
    - query: "How to implement comprehensive testing for FastAPI applications?"
      context_type: "technical_documentation"
      expected_sources: ["documentation", "code_examples", "best_practices"]
    
    - query: "Security best practices for API authentication"
      context_type: "security_guidelines"
      expected_sources: ["security_frameworks", "compliance_docs"]
    
    - query: "Performance optimization techniques for Python applications"
      context_type: "performance_guidance"
      expected_sources: ["performance_docs", "optimization_guides"]

  # Performance Analytics test data
  performance_analytics:
    - metric_type: "response_time"
      time_range: "24h"
      aggregation: "average"
    
    - metric_type: "throughput"
      time_range: "1h"
      aggregation: "sum"
    
    - metric_type: "error_rate"
      time_range: "12h"
      aggregation: "percentage"

# Expected endpoints for validation
expected_endpoints:
  agents:
    - "GET /api/agents/"
    - "POST /api/agents/"
    - "GET /api/agents/{id}"
    - "PUT /api/agents/{id}"
    - "DELETE /api/agents/{id}"
    - "GET /api/agents/{id}/skills"
    - "POST /api/agents/{id}/skills"
    - "GET /api/agents/{id}/status"
    - "POST /api/agents/{id}/execute"

  workflows:
    - "GET /api/workflows/active"
    - "GET /api/workflows/stats/dashboard"
    - "GET /api/workflows/templates/recommended"
    - "GET /api/patterns/"
    - "POST /api/patterns/"
    - "DELETE /api/patterns/{id}"

  documents:
    - "GET /api/documents/processing/pipeline"
    - "GET /api/documents/processing/live-status"
    - "POST /api/documents/processing/reprocess-all"
    - "GET /api/documents/analytics/overview"
    - "GET /api/documents/analytics/search-patterns"

  context_engineering:
    - "GET /api/context/stats"
    - "POST /api/context/initialize"
    - "GET /api/context/patterns"
    - "POST /api/context/query"
    - "GET /api/context/sources"
    - "GET /api/context/embeddings/stats"
    - "GET /api/context/retrieval/metrics"
    - "POST /api/context/embeddings/generate"

  performance_analytics:
    - "GET /api/system/metrics"
    - "GET /api/system/performance/dashboard"
    - "GET /api/system/performance/realtime"
    - "GET /api/analytics/performance"
    - "GET /api/analytics/system/overview"
    - "GET /api/metrics/response-times"
    - "GET /api/metrics/throughput"
    - "GET /api/system/health/detailed"

# Performance thresholds
performance:
  acceptable_response_time_ms: 5000
  warning_response_time_ms: 2000
  excellent_response_time_ms: 500

# Test execution settings
execution:
  parallel_tests: false
  cleanup_after_tests: true
  generate_reports: true
  save_raw_responses: true
  validate_response_schemas: true
# Performance configuration for determining success/failure
performance:
  excellent_response_time_ms: 200
  acceptable_response_time_ms: 1000
  success_threshold: 0.7  # 70% of API calls must succeed

# Expected endpoints for validation (user journeys)
expected_endpoints:
  agent_management:
    - /api/agents
    - /api/agents/{id}
    - /api/agents/{id}/skills
    - /api/agents/{id}/execute
    - /api/agents/{id}/status
    
  workflow_orchestration:
    - /api/workflows
    - /api/workflows/patterns
    - /api/workflows/templates
    - /api/workflows/{id}/execute
    - /api/workflows/{id}/status
    
  document_management:
    - /api/documents
    - /api/documents/upload
    - /api/documents/{id}/process
    - /api/documents/search
    - /api/documents/analytics
    
  context_engineering:
    - /api/context/stats
    - /api/context/patterns
    - /api/context/sources
    - /api/context/embeddings/stats
    - /api/context/rag/query
    
  performance_analytics:
    - /api/system/metrics
    - /api/system/performance/dashboard
    - /api/analytics/performance
    - /api/system/health/detailed

# User Journey Test Scenarios
user_journeys:
  agent_developer:
    name: Agent Developer Journey
    steps:
      - action: create_agent
        endpoint: /api/agents
        method: POST
        description: Create a new agent
      - action: add_skills
        endpoint: /api/agents/{id}/skills
        method: POST
        description: Add skills to agent
      - action: execute_agent
        endpoint: /api/agents/{id}/execute
        method: POST
        description: Execute agent task
      - action: check_status
        endpoint: /api/agents/{id}/status
        method: GET
        description: Monitor agent status
        
  workflow_designer:
    name: Workflow Designer Journey
    steps:
      - action: browse_patterns
        endpoint: /api/workflows/patterns
        method: GET
        description: Browse available workflow patterns
      - action: create_workflow
        endpoint: /api/workflows
        method: POST
        description: Create new workflow
      - action: execute_workflow
        endpoint: /api/workflows/{id}/execute
        method: POST
        description: Execute workflow
        
  document_user:
    name: Document Management User Journey
    steps:
      - action: upload_document
        endpoint: /api/documents/upload
        method: POST
        description: Upload a new document
      - action: process_document
        endpoint: /api/documents/{id}/process
        method: POST
        description: Process uploaded document
      - action: search_documents
        endpoint: /api/documents/search
        method: GET
        description: Search through documents

