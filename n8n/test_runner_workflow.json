
{
  "name": "Automotas AI Test Runner",
  "nodes": [
    {
      "parameters": {
        "mode": "multiplex",
        "assignments": {
          "assignments": [
            {
              "id": "start_time",
              "value": "{{ new Date().toISOString() }}"
            },
            {
              "id": "test_environment",
              "value": "{{ $env.TEST_ENVIRONMENT || 'development' }}"
            },
            {
              "id": "api_base_url", 
              "value": "{{ $env.API_BASE_URL || 'http://localhost:8000' }}"
            }
          ]
        }
      },
      "id": "init_variables",
      "name": "Initialize Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [240, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $node.init_variables.json.api_base_url }}/health",
        "options": {
          "timeout": 30000
        }
      },
      "id": "health_check",
      "name": "System Health Check",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "health_ok",
              "leftValue": "={{ $json.status }}",
              "rightValue": "healthy",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check_health_status",
      "name": "Check Health Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:3001/webhook/test-results",
        "body": {
          "test_suite": "health_check",
          "status": "failed",
          "error": "System health check failed",
          "timestamp": "={{ $node.init_variables.json.start_time }}"
        },
        "options": {
          "bodyContentType": "json"
        }
      },
      "id": "report_health_failure",
      "name": "Report Health Failure",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 480]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:3000/api/test-runner/execute",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "body": {
          "test_config": {
            "environment": "={{ $node.init_variables.json.test_environment }}",
            "api_base_url": "={{ $node.init_variables.json.api_base_url }}",
            "parallel_tests": true,
            "generate_reports": true
          },
          "test_suites": [
            "test_agents",
            "test_workflows", 
            "test_context_engineering",
            "test_multi_agent",
            "test_memory_systems",
            "test_performance_security"
          ]
        },
        "options": {
          "bodyContentType": "json"
        }
      },
      "id": "run_test_suites",
      "name": "Execute Test Suites",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "tests_passed",
              "leftValue": "={{ $json.status }}",
              "rightValue": "passed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check_test_results",
      "name": "Check Test Results",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:3001/webhook/test-success",
        "body": {
          "test_run_id": "={{ $json.test_run_id }}",
          "total_tests": "={{ $json.total_tests }}",
          "passed": "={{ $json.passed }}",
          "failed": "={{ $json.failed }}",
          "success_rate": "={{ $json.success_rate }}",
          "duration": "={{ $json.duration }}",
          "timestamp": "={{ $node.init_variables.json.start_time }}",
          "status": "success"
        },
        "options": {
          "bodyContentType": "json"
        }
      },
      "id": "report_success",
      "name": "Report Test Success",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 160]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:3001/webhook/test-failure",
        "body": {
          "test_run_id": "={{ $json.test_run_id }}",
          "total_tests": "={{ $json.total_tests }}",
          "passed": "={{ $json.passed }}",
          "failed": "={{ $json.failed }}",
          "success_rate": "={{ $json.success_rate }}",
          "duration": "={{ $json.duration }}",
          "timestamp": "={{ $node.init_variables.json.start_time }}",
          "status": "failed",
          "failed_suites": "={{ $json.detailed_results }}"
        },
        "options": {
          "bodyContentType": "json"
        }
      },
      "id": "report_failure",
      "name": "Report Test Failure",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 440]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
        "body": {
          "text": "üéâ Automotas AI Tests Passed!",
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Automotas AI Test Results* ü§ñ\n\n‚úÖ *Status:* All tests passed!\nüìä *Tests:* {{ $json.total_tests }}\n‚è±Ô∏è *Duration:* {{ $json.duration }}s\nüéØ *Success Rate:* {{ $json.success_rate }}%\nüåê *Environment:* {{ $node.init_variables.json.test_environment }}"
              }
            }
          ]
        },
        "options": {
          "bodyContentType": "json"
        }
      },
      "id": "notify_slack_success",
      "name": "Notify Slack (Success)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 160]
    },
    {
      "parameters": {
        "method": "POST", 
        "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
        "body": {
          "text": "‚ùå Automotas AI Tests Failed!",
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Automotas AI Test Results* ü§ñ\n\n‚ùå *Status:* Tests failed!\nüìä *Tests:* {{ $json.total_tests }}\n‚úÖ *Passed:* {{ $json.passed }}\n‚ùå *Failed:* {{ $json.failed }}\n‚è±Ô∏è *Duration:* {{ $json.duration }}s\nüéØ *Success Rate:* {{ $json.success_rate }}%\nüåê *Environment:* {{ $node.init_variables.json.test_environment }}"
              }
            }
          ]
        },
        "options": {
          "bodyContentType": "json"
        }
      },
      "id": "notify_slack_failure",
      "name": "Notify Slack (Failure)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 440]
    }
  ],
  "connections": {
    "init_variables": {
      "main": [
        [
          {
            "node": "health_check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "health_check": {
      "main": [
        [
          {
            "node": "check_health_status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_health_status": {
      "main": [
        [
          {
            "node": "run_test_suites",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "report_health_failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "run_test_suites": {
      "main": [
        [
          {
            "node": "check_test_results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_test_results": {
      "main": [
        [
          {
            "node": "report_success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "report_failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "report_success": {
      "main": [
        [
          {
            "node": "notify_slack_success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "report_failure": {
      "main": [
        [
          {
            "node": "notify_slack_failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-09T00:00:00.000Z",
      "updatedAt": "2025-08-09T00:00:00.000Z",
      "id": "automotas-testing",
      "name": "automotas-testing"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-08-09T00:00:00.000Z",
  "versionId": "1"
}
