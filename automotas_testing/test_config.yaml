# Automotas AI System Test Configuration
# Based on analysis of the actual system endpoints and structure

api:
  base_url: "http://api.automatos.app"
  fallback_urls:
    - "http://localhost:8001"
    - "http://localhost:8002"
    - "http://206.81.0.227:8001"
  
  authentication:
    api_key: "test_api_key_for_backend_validation_2025"
    headers:
      Content-Type: "application/json"
      X-API-Key: "test_api_key_for_backend_validation_2025"
      Authorization: "Bearer test_api_key_for_backend_validation_2025"

endpoints:
  # Core System Endpoints
  health: "/health"
  root: "/"
  
  # Agent Management Endpoints  
  agents:
    create: "/api/agents"
    list: "/api/agents"
    get: "/api/agents/{agent_id}"
    update: "/api/agents/{agent_id}"
    delete: "/api/agents/{agent_id}"
    
  # Workflow Management Endpoints
  workflows:
    create: "/api/workflows"
    list: "/api/workflows" 
    get: "/api/workflows/{workflow_id}"
    delete: "/api/workflows/{workflow_id}"
    execute: "/api/workflows/{workflow_id}/execute"
    logs: "/api/workflows/{workflow_id}/logs"
    
  # Document Management Endpoints
  documents:
    upload: "/api/admin/documents/upload"
    list: "/api/admin/documents"
    get: "/api/admin/documents/{document_id}"
    delete: "/api/admin/documents/{document_id}"
    
  # Context Engineering Endpoints
  context:
    search: "/api/context/search" 
    retrieve: "/api/context/retrieve/{document_id}"
    
  # System Monitoring Endpoints  
  system:
    metrics: "/api/system/metrics"
    stats: "/api/admin/stats"
    config: "/api/admin/config"

# Test Data for Real Testing (Not Fake Data)
test_data:
  agents:
    - name: "Context Engineering Agent"
      description: "Agent specialized in context engineering and retrieval"
      agent_type: "specialist"
      configuration:
        model: "gpt-4"
        temperature: 0.7
        max_tokens: 2000
        specialization: "context_engineering"
        capabilities: ["document_analysis", "context_retrieval", "knowledge_synthesis"]
      
    - name: "Code Analysis Agent"  
      description: "Agent for code review and technical analysis"
      agent_type: "code_reviewer"
      configuration:
        model: "gpt-4-turbo"
        temperature: 0.3
        max_tokens: 4000
        languages: ["python", "javascript", "typescript", "go"]
        
    - name: "Research Assistant Agent"
      description: "Agent for research and information gathering"
      agent_type: "researcher" 
      configuration:
        model: "gpt-4"
        temperature: 0.5
        max_tokens: 3000
        domains: ["ai", "machine_learning", "context_engineering"]

  workflows:
    - name: "Context Engineering Analysis Workflow"
      description: "Comprehensive context engineering analysis and optimization workflow"
      workflow_definition:
        steps:
          - id: "context_extraction"
            name: "Extract Context Information"
            agent_type: "context_engineering"
            dependencies: []
          - id: "context_analysis" 
            name: "Analyze Context Quality"
            agent_type: "specialist"
            dependencies: ["context_extraction"]
          - id: "context_optimization"
            name: "Optimize Context Window"
            agent_type: "specialist" 
            dependencies: ["context_analysis"]
            
    - name: "Code Review Workflow"
      description: "Multi-agent code review and analysis workflow"
      workflow_definition:
        steps:
          - id: "syntax_check"
            name: "Syntax and Style Check"
            agent_type: "code_reviewer"
            dependencies: []
          - id: "security_review"
            name: "Security Analysis"
            agent_type: "security_specialist"
            dependencies: ["syntax_check"]
          - id: "performance_review"
            name: "Performance Analysis"
            agent_type: "performance_specialist"
            dependencies: ["syntax_check"]

  documents:
    - filename: "context_engineering_research.md"
      content: |
        # Context Engineering Research Notes
        
        ## Key Findings from davidkimai/Context-Engineering Repository
        
        Context engineering is the delicate art and science of filling the context window 
        with just the right information for the next step (Andrej Karpathy).
        
        ### Core Concepts:
        1. Context Formalization: C = A(c₁, c₂, ..., cₙ)
        2. Information-theoretic principles for context optimization
        3. Multi-modal context integration
        4. Context retrieval and generation strategies
        
        ### Applications:
        - RAG systems optimization
        - Multi-agent coordination
        - Tool-integrated reasoning
        - Memory systems enhancement
      tags: ["research", "context_engineering", "ai"]
      description: "Research notes on context engineering methodologies"
      
    - filename: "system_architecture.md"
      content: |
        # Automotas AI System Architecture
        
        ## Components:
        - Orchestrator: Multi-agent coordination engine
        - Context Engine: Advanced context management
        - Document Manager: Knowledge base management
        - Agent Registry: Agent lifecycle management
        
        ## Endpoints:
        - Agent Management: /api/agents/*
        - Workflow Management: /api/workflows/*
        - Document Processing: /api/documents/*
        - Context Engineering: /api/context/*
      tags: ["architecture", "system", "documentation"]
      description: "System architecture documentation"

  context_queries:
    - query: "How does context engineering optimize LLM performance?"
      limit: 10
      expected_domains: ["ai", "context_engineering", "llm"]
      
    - query: "Multi-agent workflow orchestration patterns"
      limit: 5  
      expected_domains: ["workflows", "agents", "orchestration"]
      
    - query: "Document processing and knowledge extraction methods"
      limit: 8
      expected_domains: ["document_processing", "knowledge_extraction"]

# Performance Testing Configuration
performance:
  locust:
    users: 1  # Single user as requested
    spawn_rate: 1
    run_time: "5m"
    host: "http://localhost:8001"
    
  load_patterns:
    - name: "agent_creation_burst" 
      endpoint: "/api/agents"
      method: "POST"
      requests: 5
      
    - name: "workflow_execution"
      endpoint: "/api/workflows"
      method: "POST" 
      requests: 3
      
    - name: "document_upload"
      endpoint: "/api/admin/documents/upload"
      method: "POST"
      requests: 2

# Logging Configuration
logging:
  level: "DEBUG"
  format: "json"
  files:
    api_test_log: "logs/api_test.log"
    locust_log: "logs/locust.log"
    performance_log: "logs/performance.log"
    
  enhanced_workflow_logger:
    enabled: true
    workflow_id: "api_testing_workflow"
    track_performance: true
    track_agent_communication: true

# Test Execution Configuration
execution:
  timeout: 30  # seconds
  retry_attempts: 3
  retry_delay: 2  # seconds
  
  parallel_tests: false  # Run sequentially for better debugging
  
  test_suites:
    - "health_checks"
    - "agent_management" 
    - "workflow_management"
    - "document_management"
    - "context_engineering"
    - "performance_tests"

# Expected Results Configuration
expectations:
  response_times:
    health_check: 1.0  # seconds
    agent_creation: 5.0
    workflow_creation: 10.0  
    document_upload: 15.0
    context_search: 3.0
    
  success_rates:
    minimum: 0.95  # 95% success rate
    
  status_codes:
    health: 200
    agent_created: 201
    workflow_created: 201
    document_uploaded: 201
    context_search: 200